(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{442:function(a,v,_){"use strict";_.r(v);var t=_(42),r=Object(t.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"大数据分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大数据分析"}},[a._v("#")]),a._v(" "),_("strong",[a._v("大数据分析")])]),a._v(" "),_("h1",{attrs:{id:"hive"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hive"}},[a._v("#")]),a._v(" "),_("strong",[a._v("hive")])]),a._v(" "),_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" "),_("strong",[a._v("概述")])]),a._v(" "),_("p",[a._v("Facebook为了解决海量日志数据的分析而开发了Hive，后来开源给了Apache软件基金会。Hive是一种用类SQL语句来协助读写、管理那些存储在分布式存储系统上大数据集的数据仓库软件。")]),a._v(" "),_("p",[a._v("hive文件存储格式包括以下几类：")]),a._v(" "),_("p",[a._v("TEXTFILE")]),a._v(" "),_("p",[a._v("SEQUENCEFILE")]),a._v(" "),_("p",[a._v("RCFILE")]),a._v(" "),_("p",[a._v("ORCFILE(0.11以后出现)")]),a._v(" "),_("p",[a._v("其中TEXTFILE为默认格式，建表时不指定默认为这个格式，导入数据时会直接把数据文件拷贝到hdfs上不进行处理；SEQUENCEFILE，RCFILE，ORCFILE格式的表不能直接从本地文件导入数据，数据要先导入到textfile格式的表中， 然后再从表中用insert导入SequenceFile,RCFile,ORCFile表中。")]),a._v(" "),_("h2",{attrs:{id:"架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[a._v("#")]),a._v(" "),_("strong",[a._v("架构")])]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.001.png",alt:""}})]),a._v(" "),_("p",[a._v("如图:Hive通过用户提供的一系列交互接口,接收到用户的指令(SQL),使用自己的Driver,结合元数据(MetaStore),将这些指令翻译成MapReduce,提交到Hadoop中执行,最后,将执行返回的结果输出到用户交互接口。具体详情如下：")]),a._v(" "),_("p",[a._v("用户接口:Client CLI(hive shell 命令行),JDBC/ODBC(java访问hive),WEBUI(浏览器访问hive)")]),a._v(" "),_("p",[a._v("元数据:Metastore:元数据包括:表名,表所属数据库(默认是default) ,表的拥有者,列/分区字段,表的类型(是否是外部表),表的数据所在目录等")]),a._v(" "),_("p",[a._v("默认存储在自带的derby数据库中,推荐使用MySQL存储Metastore")]),a._v(" "),_("p",[a._v("存储:hive 使用HDFS进行存储,使用MapReduce进行计算")]),a._v(" "),_("p",[a._v("驱动器:Driver")]),a._v(" "),_("p",[a._v("解析器(SQL Parser):将SQL字符转换成抽象语法树AST,这一步一般使用都是第三方工具库完成,比如antlr,对AST进行语法分析,比如表是否存在,字段是否存在,SQL语句是否有误")]),a._v(" "),_("p",[a._v("编译器(Physical Plan):将AST编译生成逻辑执行计划")]),a._v(" "),_("p",[a._v("优化器(Query Optimizer):对逻辑执行计划进行优化")]),a._v(" "),_("p",[a._v("执行器(Execution):把逻辑执行计划转换成可以运行的物理计划,对于Hive来说,就是MR/Spark")]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.002.png",alt:""}})]),a._v(" "),_("h2",{attrs:{id:"特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[a._v("#")]),a._v(" "),_("strong",[a._v("特点")])]),a._v(" "),_("p",[a._v("1、Hive最大的特点是通过类SQL来分析大数据，而避免了写MapReduce程序来分析数据，这样使得分析数据更容易。")]),a._v(" "),_("p",[a._v("2、数据是存储在HDFS上的，Hive本身并不提供数据的存储功能")]),a._v(" "),_("p",[a._v("3、Hive是将数据映射成数据库和一张张的表，库和表的元数据信息一般存在关系型数据库上（比如MySQL）。")]),a._v(" "),_("p",[a._v("4、数据存储方面：它能够存储很大的数据集，并且对数据完整性、格式要求并不严格。")]),a._v(" "),_("p",[a._v("5、数据处理方面：因为Hive语句最终会生成MapReduce任务去计算，所以不适用于实时计算的场景，它适用于离线分析。")]),a._v(" "),_("h2",{attrs:{id:"优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[a._v("#")]),a._v(" "),_("strong",[a._v("优缺点")])]),a._v(" "),_("h2",{attrs:{id:"优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[a._v("#")]),a._v(" "),_("strong",[a._v("优点")])]),a._v(" "),_("p",[a._v("1 操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。")]),a._v(" "),_("p",[a._v("2 避免了去写MapReduce，减少开发人员的学习成本。")]),a._v(" "),_("p",[a._v("3 Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。")]),a._v(" "),_("p",[a._v("4 Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。")]),a._v(" "),_("p",[a._v("5 Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。")]),a._v(" "),_("h2",{attrs:{id:"缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[a._v("#")]),a._v(" "),_("strong",[a._v("缺点")])]),a._v(" "),_("p",[a._v("1 Hive的HQL表达能力有限。迭代式算法无法表达，数据挖掘方面不擅长，由于MapReduce数据处理流程的限制，效率更高的算法却无法实现。")]),a._v(" "),_("p",[a._v("2 Hive的效率比较低。Hive自动生成的MapReduce作业，通常情况下不够智能化，Hive调优比较困难，粒度较粗。")]),a._v(" "),_("h1",{attrs:{id:"presto"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#presto"}},[a._v("#")]),a._v(" "),_("strong",[a._v("presto")])]),a._v(" "),_("h2",{attrs:{id:"概述-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[a._v("#")]),a._v(" "),_("strong",[a._v("概述")])]),a._v(" "),_("p",[a._v("Presto是由Facebook开发的一个分布式SQL查询引擎， 它被设计为用来专门进行高速、实时的数据分析。它的产生是为了解决Hive的MapReduce模型太慢以及不能通过BI或Dashboards直接展现HDFS数据等问题。Presto是一个纯粹的计算引擎，它不存储数据，其通过Connector获取第三方Storage服务的数据。")]),a._v(" "),_("h2",{attrs:{id:"架构-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构-2"}},[a._v("#")]),a._v(" "),_("strong",[a._v("架构")])]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.003.png",alt:""}})]),a._v(" "),_("p",[a._v("Presto沿用了通用的Master-Slave架构，Coordinator即Presto的Master，Worker即其Slave，Discovery Service就是用来保存Worker结点信息的，通过HTTP协议通信，而Connector用于获取第三方存储的Metadata及原始数据等。")]),a._v(" "),_("p",[a._v("Coordinator负责解析SQL语句，生成执行计划，分发执行任务给Worker节点执行；Worker节点负责实际执行查询任务。Worker节点启动后向Discovery Server服务注册，Coordinator从Discovery Server获得可以正常工作的Worker节点。假如配置了Hive Connector，需要配置一个Hive MetaStore服务为Presto提供Hive元信息，Worker节点与HDFS交互读取数据。")]),a._v(" "),_("h2",{attrs:{id:"特点-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-2"}},[a._v("#")]),a._v(" "),_("strong",[a._v("特点")])]),a._v(" "),_("p",[a._v("1.Ad-hoc，期望查询时间秒级或几分钟")]),a._v(" "),_("p",[a._v("2.比Hive快10倍")]),a._v(" "),_("p",[a._v("3.支持多数据源，如Hive、Kafka、MySQL、MonogoDB、Redis、JMX等，也可自己实现Connector")]),a._v(" "),_("p",[a._v("Client Protocol: HTTP+JSON, support various languages(Python, Ruby, PHP, Node.js Java)")]),a._v(" "),_("p",[a._v("支持JDBC/ODBC连接")]),a._v(" "),_("p",[a._v("4.ANSI SQL，支持窗口函数，join，聚合，复杂查询等。")]),a._v(" "),_("h2",{attrs:{id:"与hive比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#与hive比较"}},[a._v("#")]),a._v(" "),_("strong",[a._v("与hive比较")])]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.004.png",alt:""}})]),a._v(" "),_("p",[a._v("上图显示了MapReduce与Presto的执行过程的不同点，MR每个操作要么需要写磁盘，要么需要等待前一个stage全部完成才开始执行，而Presto将SQL转换为多个stage，每个stage又由多个tasks执行，每个tasks又将分为多个split。所有的task是并行的方式进行允许，stage之间数据是以pipeline形式流式的执行，数据之间的传输也是通过网络以Memory-to-Memory的形式进行，没有磁盘io操作。这也是Presto性能比Hive快很多倍的决定性原因。")]),a._v(" "),_("h1",{attrs:{id:"impala"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#impala"}},[a._v("#")]),a._v(" "),_("strong",[a._v("impala")])]),a._v(" "),_("h2",{attrs:{id:"概述-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述-3"}},[a._v("#")]),a._v(" "),_("strong",[a._v("概述")])]),a._v(" "),_("p",[a._v("由cloudera公司主导开发的大数据实时查询分析工具，宣称比原来基于MapReduce的HiveSQL查询速度提升3~90倍，且更加灵活易用。提供类SQL的查询语句，能够查询存储在Hadoop的HDFS和Hbase中的PB级大数据。查询速度快是其最大的卖点。")]),a._v(" "),_("h2",{attrs:{id:"架构-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构-3"}},[a._v("#")]),a._v(" "),_("strong",[a._v("架构")])]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.005.png",alt:""}})]),a._v(" "),_("p",[a._v("从上图可以看出，位于Datanode上的每个impalad进程，都具有Query Planner,QueryCoordinator,Query ExecEnginer这几个组件，每个impala节点在功能上是对等的，也就是说，任何一个节点都能接受外部查询请求。当有一个节点发生故障后，其他节点仍然能够接管，这还得益于HDFS的数据冗余备份机制，即使某个impalad节点挂掉，只要挂掉的节点上的数据在其他节点上有备份，仍然是可以计算的。")]),a._v(" "),_("h2",{attrs:{id:"特点-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-3"}},[a._v("#")]),a._v(" "),_("strong",[a._v("特点")])]),a._v(" "),_("p",[a._v("1 查询速度快。Impala不同于hive，hive底层执行使用的是MapReduce引擎，仍然是一个批处理过程。不同于hive，impala中间结果不写入磁盘，及时通过网络以流的形式传递，大大降低的节点的IO开销。")]),a._v(" "),_("p",[a._v("2 灵活性高。可以直接查询存储在HDFS上的原生数据，也可以查询经过优化设计而存储的数据，只需要数据的格式能够兼容MapReduce、hive、Pig等等。")]),a._v(" "),_("p",[a._v("3 易整合。很容易和hadoop系统整合，并使用hadoop生态系统的资源和优势，不需要将数据迁移到特定的存储系统就能满足查询分析的要求。")]),a._v(" "),_("p",[a._v("4 可伸缩性。可以很好的与一些BI应用系统协同工作，如Microstrategy、Tableau、Qlikview等。")]),a._v(" "),_("h2",{attrs:{id:"优缺点-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-2"}},[a._v("#")]),a._v(" "),_("strong",[a._v("优缺点")])]),a._v(" "),_("h2",{attrs:{id:"优点-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[a._v("#")]),a._v(" "),_("strong",[a._v("优点")])]),a._v(" "),_("p",[a._v("1.支持SQL查询，快速查询大数据。")]),a._v(" "),_("p",[a._v("2.可以对已有数据进行查询，减少数据的加载，转换。")]),a._v(" "),_("p",[a._v("3.多种存储格式可以选择（Parquet,Text, Avro, RCFile, SequeenceFile）。")]),a._v(" "),_("p",[a._v("4.可以与Hive配合使用。")]),a._v(" "),_("h2",{attrs:{id:"缺点-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[a._v("#")]),a._v(" "),_("strong",[a._v("缺点")])]),a._v(" "),_("p",[a._v("1.不支持用户定义函数UDF。")]),a._v(" "),_("p",[a._v("2.不支持text域的全文搜索。")]),a._v(" "),_("p",[a._v("3.不支持Transforms。")]),a._v(" "),_("p",[a._v("4.不支持查询期的容错。")]),a._v(" "),_("p",[a._v("5.对内存要求高。")]),a._v(" "),_("p",[a._v("在实时性要求不高的应用场景中，比如，月度、季度、年度报表的生成。可以使用基于传统的HadoopMapreduce处理海量大数据。但是在一些实时性要求很高的场景")]),a._v(" "),_("p",[a._v("中，一方面满足实时性要求，一方面提升用户体验。Impala因其快速的响应能力当之无愧作为首选查询分析工具。")]),a._v(" "),_("h1",{attrs:{id:"kylin"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kylin"}},[a._v("#")]),a._v(" "),_("strong",[a._v("kylin")])]),a._v(" "),_("h2",{attrs:{id:"概述-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述-4"}},[a._v("#")]),a._v(" "),_("strong",[a._v("概述")])]),a._v(" "),_("p",[a._v("Apache Kylin™是一个开源的、分布式的分析型数据仓库，提供Hadoop/Spark 之上的 SQL 查询接口及多维分析（OLAP）能力以支持超大规模数据，最初由 eBay 开发并贡献至开源社区。它能在亚秒内查询巨大的表。")]),a._v(" "),_("p",[a._v("Apache Kylin™ 令使用者仅需三步，即可实现超大数据集上的亚秒级查询。")]),a._v(" "),_("p",[a._v("1 定义数据集上的一个星形或雪花形模型")]),a._v(" "),_("p",[a._v("2 在定义的数据表上构建cube")]),a._v(" "),_("p",[a._v("3 使用标准 SQL 通过 ODBC、JDBC 或 RESTFUL API 进行查询，仅需亚秒级响应时间即可获得查询结果")]),a._v(" "),_("p",[a._v("Kylin 提供与多种数据可视化工具的整合能力，如 Tableau，PowerBI 等，令用户可以使用 BI 工具对 Hadoop 数据进行分析。")]),a._v(" "),_("h2",{attrs:{id:"架构-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构-4"}},[a._v("#")]),a._v(" "),_("strong",[a._v("架构")])]),a._v(" "),_("p",[a._v("Apache Kylin 系统可以分为在线查询和离线构建两部分，技术架构如图所示，在线查询的模块主要处于上半区，而离线构建则处于下半区。")]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.006.png",alt:""}})]),a._v(" "),_("h2",{attrs:{id:"特点-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-4"}},[a._v("#")]),a._v(" "),_("strong",[a._v("特点")])]),a._v(" "),_("p",[a._v("1、可扩展超快的基于大数据的分析型数据仓库")]),a._v(" "),_("p",[a._v("Kylin 是为减少在 Hadoop/Spark 上百亿规模数据查询延迟而设计。")]),a._v(" "),_("p",[a._v("2、Hadoop ANSI SQL 接口")]),a._v(" "),_("p",[a._v("作为一个分析型数据仓库(也是 OLAP 引擎)，Kylin 为 Hadoop 提供标准 SQL 支持大部分查询功能。")]),a._v(" "),_("p",[a._v("3、交互式查询能力")]),a._v(" "),_("p",[a._v("通过 Kylin，用户可以与 Hadoop 数据进行亚秒级交互，在同样的数据集上提供比 Hive 更好的性能。")]),a._v(" "),_("p",[a._v("4、多维立方体（MOLAP Cube）")]),a._v(" "),_("p",[a._v("用户能够在 Kylin 里为百亿以上数据集定义数据模型并构建立方体。")]),a._v(" "),_("p",[a._v("5、Job管理与监控")]),a._v(" "),_("p",[a._v("6、压缩与编码")]),a._v(" "),_("p",[a._v("7、增量更新")]),a._v(" "),_("p",[a._v("8、利用HBase Coprocessor")]),a._v(" "),_("p",[a._v("9、基于HyperLogLog的Dinstinc Count近似算法")]),a._v(" "),_("p",[a._v("10、友好的web界面以管理，监控和使用立方体")]),a._v(" "),_("p",[a._v("11、项目及表级别的访问控制安全")]),a._v(" "),_("p",[a._v("12、支持LDAP、SSO")]),a._v(" "),_("h2",{attrs:{id:"优缺点-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-3"}},[a._v("#")]),a._v(" "),_("strong",[a._v("优缺点")])]),a._v(" "),_("h2",{attrs:{id:"优点-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点-3"}},[a._v("#")]),a._v(" 优点")]),a._v(" "),_("p",[a._v("1.写SQL查询，结果预聚合。")]),a._v(" "),_("p",[a._v("2.有可视化页面。")]),a._v(" "),_("h2",{attrs:{id:"缺点-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3"}},[a._v("#")]),a._v(" "),_("strong",[a._v("缺点")])]),a._v(" "),_("p",[a._v("1.集群依赖较多，如HBase和Hive等，属于重量级方案，因此运维成本也较高。")]),a._v(" "),_("p",[a._v("2.查询的维度组合数量需要提前确定好，不适合即席查询分析。")]),a._v(" "),_("p",[a._v("3.预计算量大，资源消耗多。")]),a._v(" "),_("h1",{attrs:{id:"greenplum"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#greenplum"}},[a._v("#")]),a._v(" "),_("strong",[a._v("Greenplum")])]),a._v(" "),_("h2",{attrs:{id:"_5-1-概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-概述"}},[a._v("#")]),a._v(" "),_("strong",[a._v("5.1 概述")])]),a._v(" "),_("p",[a._v("GreenPlum是业界最快最高性价比的关系型分布式数据库,它在开源的PostgreSQL的基础上采用MPP架构（Massive Parallel Processing，海量并行处理）,具有强大的大规模数据分析任务处理能力。")]),a._v(" "),_("p",[a._v("GreenPlum作为大数据融合存储平台中众多数据库之一，与其他数据库系统和文件系统一起，为OceanMind提供完整的OceanStorage大数据融合存储解决方案。")]),a._v(" "),_("h2",{attrs:{id:"架构-5"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构-5"}},[a._v("#")]),a._v(" "),_("strong",[a._v("架构")])]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.001.png",alt:""}})]),a._v(" "),_("p",[a._v("GreenPlum数据库是典型的Master/Slave架构。")]),a._v(" "),_("p",[a._v("如上图所示，在Greenplum集群中，存在一个Master节点和多个Segment节点。")]),a._v(" "),_("p",[a._v("Master实例是GreenPlum数据库服务端，服务端通过端口监听客户端连接。")]),a._v(" "),_("p",[a._v("Segment由Master分配，管理一部分数据存储进程，每个Segment都采用独立端口监听。")]),a._v(" "),_("p",[a._v("Master实例协调所有数据库实例，分布式请求Segment并且合并从Segment返回的结果。")]),a._v(" "),_("p",[a._v("GreenPlum数据库采用典型的Shared Nothing架构（MPP），每个节点只访问自己的本地资源（内存、存储等），节点之间的信息交互都是通过节点高速互联网络实现，这个过程一般称为数据重分配。GreenPlum数据库采用了MPP架构，其主要的优点是大规模的并行处理能力。")]),a._v(" "),_("p",[a._v("1、大规模存储。GreenPlum数据库通过将数据规律地分布到多个节点上来实现大规模数据的存储，支持50PB级海量数据的存储和处理。")]),a._v(" "),_("p",[a._v("2、并行处理。GreenPlum数据库通过外部表并行装载、并行备份恢复与并行查询处理实现强大的并行处理。")]),a._v(" "),_("h2",{attrs:{id:"特点-5"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-5"}},[a._v("#")]),a._v(" "),_("strong",[a._v("特点")])]),a._v(" "),_("h2",{attrs:{id:"完善的标准"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#完善的标准"}},[a._v("#")]),a._v(" "),_("strong",[a._v("完善的标准")])]),a._v(" "),_("p",[a._v("1、GreenPlum数据库支持ANSI SQL 2008和SQL OLAP 2003扩展")]),a._v(" "),_("p",[a._v("2、支持ODBC和JDBC应用编程接口。完善的标准支持使得系统开发、维护和管理都大为方便。")]),a._v(" "),_("h2",{attrs:{id:"数据的强一致性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据的强一致性"}},[a._v("#")]),a._v(" "),_("strong",[a._v("数据的强一致性")])]),a._v(" "),_("p",[a._v("GreenPlum数据库支持分布式事务，支持ACID，保证数据库中数据的强一致性。")]),a._v(" "),_("h2",{attrs:{id:"良好的线性扩展能力"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#良好的线性扩展能力"}},[a._v("#")]),a._v(" "),_("strong",[a._v("良好的线性扩展能力")])]),a._v(" "),_("p",[a._v("GreenPlum数据库采用MPP架构，其基本特征是由多台SMP（Symmetric Multi-Processor，对称多处理器）服务器通过节点互联网络连接而成，是一种Share Nothing（完全无共享）结构，因而扩展能力最强，理论上可以无限扩展。目前的技术可以实现512个节点互联，包含数千个CPU。")]),a._v(" "),_("h2",{attrs:{id:"vs传统数据库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vs传统数据库"}},[a._v("#")]),a._v(" "),_("strong",[a._v("VS传统数据库")])]),a._v(" "),_("p",[a._v("使用传统数据库时，我们经常会通过分库分表的方式将数据打散到多个数据库实例中。其缺点在于可能会出现不平均的情况：数据在后端被打散成许多数据分片，但是有些分片的数据量很大，热度很高，有些分片相对来说热度较低。当进行数据统计或分析时，一部分用户数据处理速度慢，一部分用户数据处理速度快，使得许多用户的体验下降。")]),a._v(" "),_("p",[a._v("GreenPlum数据库采用分而治之的方法，将数据非常均衡的分布在所有节点上。而且当服务器数量不够或者计算能力不够的时候，可以在线横向扩展，此时数据库会重新做二次分片，也就是表数据需要重新分布，在保证强大处理能力的同时也时刻保持用户性能的均衡，提升用户体验。")]),a._v(" "),_("h1",{attrs:{id:"kingbase-analyticsdb"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kingbase-analyticsdb"}},[a._v("#")]),a._v(" "),_("strong",[a._v("Kingbase AnalyticsDB")])]),a._v(" "),_("h2",{attrs:{id:"概述-5"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述-5"}},[a._v("#")]),a._v(" "),_("strong",[a._v("概述")])]),a._v(" "),_("p",[a._v("KingbaseAnalyticsDB（简称KADB）是人大金仓为应对大数据时代海量数据分析处理的需求推出的具备高性能、高扩展能力的MPP数据库。它具有分布式集群部署、数据分片无共享存储、大规模并行处理技术（MPP）、数据分区、行列混存、数据库内压缩、MapReduce、在线扩容、内嵌数十种AI算法等技术特点，能满足当前各行业对大量数据采集、存储、挖掘及分析等多种需求的能力。")]),a._v(" "),_("p",[a._v("目前，该产品主要定位于数据分析类应用市场，可处理PB级甚至更大存储量的数据，并能集成多种异构数据源进行数据挖掘和分析，在处理多表连接、聚合等各类复杂查询方面也体现出了很好的性能。")]),a._v(" "),_("h2",{attrs:{id:"架构-6"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构-6"}},[a._v("#")]),a._v(" "),_("strong",[a._v("架构")])]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.007.png",alt:""}})]),a._v(" "),_("p",[a._v("MPP数据库并行查询技术主要是为了提升多节点并行查询时的查询性能而设计的。")]),a._v(" "),_("p",[a._v("其设计思路如下：让用户的数据较均匀地分开存放在各集群计算节点上（采用哈希分布或随机分布等）——管理实例接受客户端查询请求——分析请求并生成查询计划——分发查询计划给计算实例并发查询。")]),a._v(" "),_("h2",{attrs:{id:"特点-6"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-6"}},[a._v("#")]),a._v(" "),_("strong",[a._v("特点")])]),a._v(" "),_("h2",{attrs:{id:"海量数据存储-弹性扩展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#海量数据存储-弹性扩展"}},[a._v("#")]),a._v(" "),_("strong",[a._v("海量数据存储，弹性扩展")])]),a._v(" "),_("p",[a._v("1、PB级数据存储能力，采用多种存储和压缩方式减少空间占用。")]),a._v(" "),_("p",[a._v("2、在线扩展，减少项目初期投入。")]),a._v(" "),_("h2",{attrs:{id:"内置机器学习能力"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内置机器学习能力"}},[a._v("#")]),a._v(" "),_("strong",[a._v("内置机器学习能力")])]),a._v(" "),_("p",[a._v("支持库内并行回归、分类、聚类、图计算等机器学习、统计分析算法。")]),a._v(" "),_("h2",{attrs:{id:"mpp架构-完整sql支持"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mpp架构-完整sql支持"}},[a._v("#")]),a._v(" "),_("strong",[a._v("MPP架构，完整SQL支持")])]),a._v(" "),_("p",[a._v("1、兼容各类主流ETL、BI工具。")]),a._v(" "),_("p",[a._v("2、高效支持数据仓库类业务高效支持数据仓库类业务法。")]),a._v(" "),_("h2",{attrs:{id:"地理信息处理能力"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#地理信息处理能力"}},[a._v("#")]),a._v(" "),_("strong",[a._v("地理信息处理能力")])]),a._v(" "),_("p",[a._v("支持混合地理信息数据的分析应用。")]),a._v(" "),_("h2",{attrs:{id:"具备开放能力-扩展性强"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#具备开放能力-扩展性强"}},[a._v("#")]),a._v(" "),_("strong",[a._v("具备开放能力，扩展性强")])]),a._v(" "),_("p",[a._v("1、支持和大数据生态组件高效互访问。")]),a._v(" "),_("p",[a._v("2、通过扩展数据类型和算法可实现行业特有数据的存储计算析应用。")]),a._v(" "),_("h2",{attrs:{id:"应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[a._v("#")]),a._v(" "),_("strong",[a._v("应用场景")])]),a._v(" "),_("h2",{attrs:{id:"数据仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据仓库"}},[a._v("#")]),a._v(" "),_("strong",[a._v("数据仓库")])]),a._v(" "),_("p",[a._v("业务痛点：企业或组织需要将业务系统中的结构化数据进行清洗转换再汇聚存储，以支撑决策支持系统、商业智能工具实现数据访问的目的。")]),a._v(" "),_("p",[a._v("产品价值：KADB具备MPP和透明扩展能力，可提供可扩展的数据存储和高效SQL计算。同时，可作为数据仓库中的ODS、EDW、DM层使用，并提供外部访问文件系统、HDFS、消息管道等功能。")]),a._v(" "),_("h2",{attrs:{id:"数据探索"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据探索"}},[a._v("#")]),a._v(" "),_("strong",[a._v("数据探索")])]),a._v(" "),_("p",[a._v("业务痛点：企业或组织需要探索已有的结构化、半结构化数据之间的关联或模式，以建立模型用于预测并指导业务发展。")]),a._v(" "),_("p",[a._v("产品价值：KADB提供可扩展的基于SQL的并行计算框架，内置地理信息算法、机器学习算法、图算法并支持通过R、Python、C编写自定义函数扩展算法，可实现对业务的预测及指导。")]),a._v(" "),_("h2",{attrs:{id:"大数据中心"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大数据中心"}},[a._v("#")]),a._v(" "),_("strong",[a._v("大数据中心")])]),a._v(" "),_("p",[a._v("业务痛点：高价值密度的结构化数据由于要应对复杂的数据预处理和挖掘，需要高效的优化器支持。并且，经过处理和汇总的数据需要对外提供低延迟的查询方式。")]),a._v(" "),_("p",[a._v("产品价值：KADB支持基于代价的优化器处理复杂的SQL查询，支持流水式并行执行和多种索引处理低延迟SQL查询，可高效支撑数据中心对结构化数据的存储计算需求；同时，KADB支持和大数据组件的互访问及各类主流ETL、BI工具，可作为大数据处理平台的组件或主要入口。")]),a._v(" "),_("h1",{attrs:{id:"teradata"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#teradata"}},[a._v("#")]),a._v(" "),_("strong",[a._v("teradata")])]),a._v(" "),_("h2",{attrs:{id:"概述-6"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述-6"}},[a._v("#")]),a._v(" "),_("strong",[a._v("概述")])]),a._v(" "),_("p",[a._v("Teradata是由Teradata公司开发的，它主要适用于构建大规模数据仓库应用程序。")]),a._v(" "),_("p",[a._v("Teradata在整体上是按Shared Nothing 架构体系进行组织的，他的定位就是大型数据仓库系统，定位比较高，他的软硬件都是NCR自己的，其他的都不识别；所以一般的企业用不起，价格很贵。由于Teradata通常被用于OLAP应用，因此单机的Teradata系统很少见，即使是单机系统，Teradata也建议使用SMP结构以尽可能地提供更好的数据库性能。")]),a._v(" "),_("h2",{attrs:{id:"架构-7"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构-7"}},[a._v("#")]),a._v(" "),_("strong",[a._v("架构")])]),a._v(" "),_("p",[a._v("Teradata架构基于大规模并行处理（MPP）架构。 Teradata的主要组件是解析引擎，BYNET和访问模块处理器（AMP）。 下图显示了Teradata节点的高级架构。")]),a._v(" "),_("p",[a._v("当客户端运行查询以插入记录时，解析引擎将记录发送到BYNET。 BYNET检索记录并将该行发送到目标AMP，AMP将这些记录存储在其磁盘上。")]),a._v(" "),_("p",[a._v("当客户端运行查询以检索记录时，解析引擎会向BYNET发送请求。 BYNET将检索请求发送到适当的AMP，然后AMPs并行搜索其磁盘并识别所需的记录并发送到BYNET。BYNET然后将记录发送到解析引擎，解析引擎又将发送到客户端。")]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.008.png",alt:""}})]),a._v(" "),_("h2",{attrs:{id:"特点-7"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-7"}},[a._v("#")]),a._v(" "),_("strong",[a._v("特点")])]),a._v(" "),_("p",[a._v("1、无限并行化 - Teradata数据库系统基于大规模并行处理（MPP）架构。 MPP架构在整个系统上平均分配负载。 Teradata系统在其进程之间分割任务，并并行运行它们以确保任务快速完成。")]),a._v(" "),_("p",[a._v("2、没有共享架构 - Teradata的架构称为共享无架构。 Teradata节点，其访问模块处理器（AMP）和与AMP相关联的磁盘独立工作。 他们不会与他人分享。")]),a._v(" "),_("p",[a._v("3、连接 - Teradata可连接到通道连接的系统，如主机或网络连接的系统。")]),a._v(" "),_("p",[a._v("4、成熟优化程序 - Teradata优化程序是市场上成熟的优化程序之一。 它自从开始就被设计为平行的。 它已经针对每个版本进行了优化。")]),a._v(" "),_("p",[a._v("5、SQL - Teradata支持行业标准SQL与存储在表中的数据进行交互。 除此之外，它提供自己的扩展。")]),a._v(" "),_("p",[a._v("6、强大的实用工具 - Teradata提供强大的实用程序，用于从/向Teradata系统导入/导出数据，例如FastLoad，MultiLoad，FastExport和TPT。")]),a._v(" "),_("p",[a._v("7、自动分发 - Teradata自动将数据均匀分发到磁盘，无需任何手动干预。")]),a._v(" "),_("h1",{attrs:{id:"doris"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#doris"}},[a._v("#")]),a._v(" "),_("strong",[a._v("doris")])]),a._v(" "),_("h2",{attrs:{id:"概述-7"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述-7"}},[a._v("#")]),a._v(" "),_("strong",[a._v("概述")])]),a._v(" "),_("p",[a._v("Apache Doris是一个现代化的MPP分析型数据库产品。仅需亚秒级响应时间即可获得查询结果，有效地支持实时数据分析。Apache Doris的分布式架构非常简洁，易于运维，并且可以支持10PB以上的超大数据集。")]),a._v(" "),_("p",[a._v("Apache Doris可以满足多种数据分析需求，例如固定历史报表，实时数据分析，交互式数据分析和探索式数据分析等。令您的数据分析工作更加简单高效！")]),a._v(" "),_("p",[a._v("Doris 主要解决 PB 级别的数据量（如果高于 PB 级别，不推荐使用 Doris 解决，可以考虑用 Hive 等工具），解决结构化数据，查询时间一般在秒级或毫秒级。")]),a._v(" "),_("p",[a._v("Doris 由百度大数据部研发 ( 之前叫百度 Palo，2018年贡献到 Apache 社区后，更名为 Doris )，在百度内部，有超过200个产品线在使用，部署机器超过1000台，单一业务最大可达到上百 TB。百度将 Doris 贡献给 Apache 社区之后，许多外部用户也成为了 Doris 的使用者，例如新浪微博，美团，小米等著名企业。")]),a._v(" "),_("h2",{attrs:{id:"架构-8"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构-8"}},[a._v("#")]),a._v(" "),_("strong",[a._v("架构")])]),a._v(" "),_("p",[a._v("Doris 的整体架构和 TiDB 类似，借助 MySQL 协议，用户使用任意 MySQL 的 ODBC/JDBC以及MySQL 的客户端，都可以直接访问 Doris。Doris 中的模块包括 FE 和 BE 两类：FE 主要负责元数据的管理、存储，以及查询的解析等；一个用户请求经过 FE 解析、规划后，具体的执行计划会发送给 BE，BE 则会完成查询的具体执行。BE 节点主要负责数据的存储、以及查询计划的执行。目前平台的 FE 部分主要使用 Java，BE 部分")]),a._v(" "),_("p",[a._v("主要使用 C++。")]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.009.png",alt:""}})]),a._v(" "),_("h2",{attrs:{id:"特点-8"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-8"}},[a._v("#")]),a._v(" "),_("strong",[a._v("特点")])]),a._v(" "),_("p",[a._v("1、现代化MPP架构")]),a._v(" "),_("p",[a._v("2、秒级查询返回延迟")]),a._v(" "),_("p",[a._v("3、支持标准SQL语言，兼容MySQL协议")]),a._v(" "),_("p",[a._v("4、向量化执行器")]),a._v(" "),_("p",[a._v("5、高效的聚合表技术")]),a._v(" "),_("p",[a._v("6、新型预聚合技术Rollup")]),a._v(" "),_("p",[a._v("7、高性能、高可用、高可靠")]),a._v(" "),_("p",[a._v("8、极简运维，弹性伸缩")]),a._v(" "),_("h2",{attrs:{id:"适用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[a._v("#")]),a._v(" "),_("strong",[a._v("适用场景")])]),a._v(" "),_("p",[a._v("1、对数据分析、统计")]),a._v(" "),_("p",[a._v("数据分析大体上可以分为两大类场景：一种偏向于报表类的，另一种偏向于多维分析的。")]),a._v(" "),_("p",[a._v("2、报表")]),a._v(" "),_("p",[a._v("报表类数据分析，数据分析以及查询的模式相对比较固定，而且后台 SQL 的模式往往都是确定的。针对此类应用场景，选择使用 MySQL 存结果数据，用户可从界面选择执行批处理以及发送邮件。在 Doris 平台中，报表类查询时延一般在秒级以下。")]),a._v(" "),_("p",[a._v("3、多维分析")]),a._v(" "),_("p",[a._v("这里提到的多维分析，同样要求数据是结构化的，适用于查询相对灵活的场景，例如数据分析条件以及聚合维度等方面不是很确定，一般将此类数据分析定义为多维分析。相对于报表类分析，多维分析的查询时延会稍慢，大约在会在 10s 的级别。")]),a._v(" "),_("h1",{attrs:{id:"clickhouse"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#clickhouse"}},[a._v("#")]),a._v(" "),_("strong",[a._v("Clickhouse")])]),a._v(" "),_("h2",{attrs:{id:"概述-8"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述-8"}},[a._v("#")]),a._v(" "),_("strong",[a._v("概述")])]),a._v(" "),_("p",[a._v("Clickhouse是开源列式数据库，用于联机分析处理（OLAP）的列式数据库管理系统（columnar DBMS），专为在线数据分析而设计，官方提供的文档表名，ClickHouse 日处理记录数”十亿级”。")]),a._v(" "),_("h2",{attrs:{id:"架构-9"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构-9"}},[a._v("#")]),a._v(" "),_("strong",[a._v("架构")])]),a._v(" "),_("p",[a._v("ClickHouse采用Multi-Master多主架构，集群中的每个节点角色对等，客户端访问任意一个节点都能得到相同的效果。这种多主的架构有许多优势，例如对等的角色使系统架构变得更加简单，不用再区分主控节点、数据节点和计算节点，集群中的所有节点功能相同。所以它天然规避了单点故障的问题，非常适合用于多数据中心、异地多活的场景。")]),a._v(" "),_("p",[a._v("目前ClickHouse公开的资料相对匮乏，比如在架构设计层面就很难找到完整的资料，甚至连一张整体的架构图都没有。下图为 ClickHouse架构设计中的核心模块")]),a._v(" "),_("p",[_("img",{attrs:{src:"/docs/images/dashuju/Aspose.Words.390a89bc-6b49-496d-b349-93be6392fec4.010.png",alt:""}})]),a._v(" "),_("h2",{attrs:{id:"特点-9"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-9"}},[a._v("#")]),a._v(" "),_("strong",[a._v("特点")])]),a._v(" "),_("p",[a._v("1、列式存储")]),a._v(" "),_("p",[a._v("2、数据高效压缩")]),a._v(" "),_("p",[a._v("3、基于磁盘存储")]),a._v(" "),_("p",[a._v("4、数据有序存储：支持在建表时，指定将数据按照某些列进行sort by")]),a._v(" "),_("p",[a._v("5、主键索引")]),a._v(" "),_("p",[a._v("6、稀疏索引")]),a._v(" "),_("p",[a._v("7、数据Sharding")]),a._v(" "),_("p",[a._v("8、数据partitioning：partition by")]),a._v(" "),_("p",[a._v("9、数据TTL")]),a._v(" "),_("p",[a._v("10、高吞吐写入能力")]),a._v(" "),_("p",[a._v("11、主备同步")]),a._v(" "),_("p",[a._v("12、多核并行")]),a._v(" "),_("p",[a._v("13、分布式计算")]),a._v(" "),_("p",[a._v("14、向量化执行与SIMD")]),a._v(" "),_("p",[a._v("15、动态代码生成Runtime Codegen")]),a._v(" "),_("p",[a._v("16、复杂数据类型支持")]),a._v(" "),_("h2",{attrs:{id:"优缺点-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-4"}},[a._v("#")]),a._v(" "),_("strong",[a._v("优缺点")])]),a._v(" "),_("h2",{attrs:{id:"优点-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点-4"}},[a._v("#")]),a._v(" "),_("strong",[a._v("优点")])]),a._v(" "),_("p",[a._v("1 多个服务器上的分布式处理：分布式查询：从分布式表查询-> 重写 ->负载均衡,发送给远程节点查询->接收结果、合并")]),a._v(" "),_("p",[a._v("2 非常快速的扫描，可用于实时查询")]),a._v(" "),_("p",[a._v("3 列存储非常适合使用“宽”/“非规范化”表（许多列）：计算类查询时，大大减少IO消耗")]),a._v(" "),_("p",[a._v("4 压缩性好：相对mysql压缩10倍")]),a._v(" "),_("p",[a._v("5 SQL支持（有限制）")]),a._v(" "),_("p",[a._v("6 良好的功能集，包括支持近似计算")]),a._v(" "),_("p",[a._v("7 不同的表引擎：MergeTree，ReplicatedMergeTree，Distributed等")]),a._v(" "),_("p",[a._v("8 非常适合结构日志/事件数据以及时间序列数据（引擎MergeTree需要日期字段）")]),a._v(" "),_("p",[a._v("9 索引支持（仅限主键，不是所有存储引擎）")]),a._v(" "),_("p",[a._v("10 漂亮的命令行界面，具有用户友好的进度条和格式")]),a._v(" "),_("h2",{attrs:{id:"缺点-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点-4"}},[a._v("#")]),a._v(" "),_("strong",[a._v("缺点")])]),a._v(" "),_("p",[a._v("1 没有真正的删除/更新支持，也没有事务（与Spark和大多数大数据系统相同），没有delete/update")]),a._v(" "),_("p",[a._v("2 没有二级密钥（与Spark和大多数大数据系统相同）")]),a._v(" "),_("p",[a._v("3 只支持自己的协议（没有MySQL协议支持）")]),a._v(" "),_("p",[a._v("4 有限的SQL支持，以及连接实现是不同的。如果要从MySQL或Spark迁移，则可能必须使用连接重新编写所有查询。")]),a._v(" "),_("p",[a._v("5 没有"),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Select_(SQL)#Window_function",target:"_blank",rel:"noopener noreferrer"}},[a._v("窗口功能"),_("OutboundLink")],1),a._v("。")])])}),[],!1,null,null,null);v.default=r.exports}}]);