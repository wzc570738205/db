(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{393:function(e,_,v){"use strict";v.r(_);var a=v(42),r=Object(a.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"mysql"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[e._v("#")]),e._v(" "),v("code"),v("strong",[e._v("Mysql")])]),e._v(" "),v("h2",{attrs:{id:"概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" "),v("strong",[e._v("概述")])]),e._v(" "),v("p",[e._v("MySQL是一种开放源代码的关系型数据库管理系统（RDBMS），使用最常用的数据库管理语言--结构化查询语言（SQL）进行数据库管理。MySQL是开放源代码的，因此任何人都可以在General Public License的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。大多数人都认为在不需要事务化处理的情况下，MySQL是管理内容最好的选择。")]),e._v(" "),v("h2",{attrs:{id:"架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[e._v("#")]),e._v(" "),v("strong",[e._v("架构")])]),e._v(" "),v("h2",{attrs:{id:"体系结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#体系结构"}},[e._v("#")]),e._v(" "),v("strong",[e._v("体系结构")])]),e._v(" "),v("p",[v("img",{attrs:{src:"/images/guanxixing/Aspose.Words.a10c56e4-d776-45a2-8e4d-e512eb974108.015.jpeg",alt:"MySQL体系架构"}})]),e._v(" "),v("p",[e._v("由图，可以看出MySQL最上层是连接组件。下面服务器是由连接池、管理工具和服务、SQL接口、解析器、优化器、缓存、存储引擎、文件系统组成。")]),e._v(" "),v("p",[e._v("1、连接池：由于每次建立建立需要消耗很多时间，连接池的作用就是将这些连接缓存下来，下次可以直接用已经建立好的连接，提升服务器性能。")]),e._v(" "),v("p",[e._v("2、管理工具和服务：系统管理和控制工具，例如备份恢复、Mysql复制、集群等。")]),e._v(" "),v("p",[e._v("3、SQL接口：接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL Interface。")]),e._v(" "),v("p",[e._v("4、解析器: SQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本， 主要功能：将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的。")]),e._v(" "),v("p",[e._v("5、优化器：查询优化器，SQL语句在查询之前会使用查询优化器对查询进行优化。他使用的是“选取-投影-联接”策略进行查询。用一个例子就可以理解：select uid，name from user where gender = 1。首先，这个select 查询先根据where 语句进行选取，而不是先将表全部查询出来以后再进行gender过滤；然后，这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤；最后，将这两个查询条件联接起来生成最终查询结果")]),e._v(" "),v("p",[e._v("6、缓存器： 查询缓存，如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。通过LRU算法将数据的冷端溢出，未来得及时刷新到磁盘的数据页，叫脏页。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等。")]),e._v(" "),v("h2",{attrs:{id:"存储结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#存储结构"}},[e._v("#")]),e._v(" "),v("strong",[e._v("存储结构")])]),e._v(" "),v("p",[e._v("MySQL的数据存储结构主要分两个方面：物理存储结构与内存存储结构，作为数据库，所有的数据最后一定要落到磁盘上，才能完成持久化的存储。内存结构为了实现提升数据库整体性能，主要用于存储临时数据和日志的缓冲。本文主要讲MySQL的物理结构，以及MySQL的内存结构，对于存储引擎也主要以InnoDB为主。")]),e._v(" "),v("p",[v("img",{attrs:{src:"/images/guanxixing/Aspose.Words.a10c56e4-d776-45a2-8e4d-e512eb974108.009.png",alt:""}})]),e._v(" "),v("p",[e._v("上图的 On-Disk Structures 主要是InnoDB存储引擎的磁盘结构，对于MySQL数据库来说，还包括一些文件、日志、表结构存储结构等。")]),e._v(" "),v("p",[e._v("文件主要包括参数文件、日志文件、表结构文件、存储引擎文件等，存储引擎文件主要包括表空间文件、redo log等。")]),e._v(" "),v("p",[e._v("参数文件指的是MySQL实例启动时，会先去读取的参数配置文件，配置内容包含各种文件的位置，一些初始化参数，这些参数定义了某种内存结构的大小设置，还包括一些其他配置，如：主从配置等。")]),e._v(" "),v("p",[e._v("日志文件记录了MySQL数据库的各种类型活动，这些日志都是在Server层实现的，是各种存储引擎都会有的日志文件。包括错误日志、binlog、慢查询日志、查询日志：")]),e._v(" "),v("p",[e._v("错误日志主要用于查看MySQL出现错误时，用来排查问题使用，是DBA出问题时，首要关注的日志。")]),e._v(" "),v("p",[e._v("慢查询日志是用来记录低于阈值的SQL语句，这个阈值通过long_query_time设置，默认是10秒，通过查询慢查询日志，也可以得到一些关于数据库需要优化的信息，比如需要某个语句执行扫描了全表，没有走到索引。开发人员可以结合场景去优化SQL语句或者优化索引的设置等。")]),e._v(" "),v("p",[e._v("查询日志记录了所有对MySQL数据库请求的信息，不论这些请求是否得到了正确的执行。")]),e._v(" "),v("p",[e._v("binlog是server层维护的一种二进制日志，与后面要说的InnoDB存储引擎层的redo log不同，主要用来记录对MySQL数据更新或潜在发生更新的SQL语句，不包括Select和Show这类操作。binlog默认是不开启的，测试表明开启确实会影响MySQL的性能。不过通过binlog可以实现数据的备份同步和数据恢复，同这么强大的作用比起来，损失这点性能也是值得的，所以建议开启。")]),e._v(" "),v("p",[e._v("当使用支持事务的存储引擎时，未提交事务的binlog会存储到binlog_cache中，而提交的事务，要根据参数来确定从缓冲刷到磁盘的时间。")]),e._v(" "),v("h2",{attrs:{id:"内存结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内存结构"}},[e._v("#")]),e._v(" "),v("strong",[e._v("内存结构")])]),e._v(" "),v("p",[e._v("InnoDB存储引擎使用Buffer Pool在内存中缓存表数据和索引，处理数据时可以直接操作缓冲池的数据，提升InnoDB的处理速度。缓冲池的数据一般按照页格式，每个页包含多行数据，缓冲池可以看成是页面链表，并且使用LRU（last recent used）算法，来管理缓冲池的数据列表。当需要新空间将新页面加到缓冲池时，将会淘汰最近最少使用的数据。"),v("img",{attrs:{src:"/images/guanxixing/Aspose.Words.a10c56e4-d776-45a2-8e4d-e512eb974108.016.png",alt:""}})]),e._v(" "),v("p",[e._v("MySQL提供了多个关于缓冲池的配置参数：")]),e._v(" "),v("p",[e._v("innodb_buffer_pool_instances与innodb_buffer_pool_size 配置缓冲池的实例和缓冲池大小：通过配置多个缓冲池可以减少不同线程的竞争，提升并发度。通常在专用服务器上，80%的物理内存会分配给Buffer Pool。")]),e._v(" "),v("p",[e._v("1、innodb_buffer_pool_chunk_size配置缓冲池的块大小：当增加或减少innodb_buffer_pool_size时，操作以块形式执行，块大小由此参数决定，默认为128M。")]),e._v(" "),v("p",[e._v("2、innodb_max_dirty_pages_pct 配置脏页比例：根据设置的缓冲池中脏页比例，来触发将脏页刷盘的时机。另外，InnoDB也根据redo log的生成速度和刷新频率，来触发刷盘时机。")]),e._v(" "),v("p",[e._v("3、innodb_read_ahead_threshold 与 innodb_random_read_ahead 预读参数配置：预读是指一次I/O请求磁盘中某页中的数据时，会同时同步取出相邻页面的数据，缓存到缓冲池。因为，InnoDB认为这些页面的数据大概率也将会被读取，从而来提升I/O性能。包括线性预读和随机预读。")]),e._v(" "),v("h3",{attrs:{id:"change-buffer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#change-buffer"}},[e._v("#")]),e._v(" Change Buffer")]),e._v(" "),v("p",[e._v("用来缓存不在缓冲池中的辅助索引页(非唯一索引)的变更。这些缓存的的变更，可能由INSERT、UPDATE或DELETE操作产生，当读操作将这些变更的页从磁盘载入缓冲池时，InnoDB引擎会将change buffer中缓存的变更跟载入的辅助索引页合并。")]),e._v(" "),v("p",[e._v("不像聚簇索引，辅助索引通常不是唯一的，并且辅助索引的插入顺序是相对随机的。若不用change buffer，那么每有一个页产生变更，都要进行I/O操作来合并变更。使用change buffer可以先将辅助索引页的变更缓存起来，当这些变更的页被其他操作载入缓冲池时再执行merge操作，这样可以减少大量的随机I/O。change buffer可能缓存了一个页内的多条记录的变更，这样可以将多次I/O操作减少至一次。")]),e._v(" "),v("p",[e._v("在内存中，change buffer占据缓冲池的一部分。在磁盘上，change buffer是系统表空间的一部分，以便数据库重启后缓存的索引变更可以继续被缓存")]),e._v(" "),v("h3",{attrs:{id:"自适应哈希索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自适应哈希索引"}},[e._v("#")]),e._v(" 自适应哈希索引")]),e._v(" "),v("p",[e._v("自适应哈希索引是InnoDB表通过在内存中构造一个哈希索引来加速查询的优化技术，此优化只针对使用 '=' 和 'IN' 运算符的查询。MySQL会监视InnoDB表的索引查找，若能通过构造哈希索引来提高效率，那么InnoDB会自动为经常访问的辅助索引页建立哈希索引。")]),e._v(" "),v("p",[e._v("这个哈希索引总是基于辅助索引(B+树结构)来构造。MySQL通过索引键的任意长度的前缀和索引的访问模式来构造哈希索引。InnoDB只为某些热点页构建哈希索引。")]),e._v(" "),v("h3",{attrs:{id:"log-buffe"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#log-buffe"}},[e._v("#")]),e._v(" Log Buffe")]),e._v(" "),v("p",[e._v("Log Buffer用来缓存要写入磁盘日志文件的内存缓冲区域，该区域大小由 innodb_log_buffer_size 参数定义，默认16MB。")]),e._v(" "),v("h3",{attrs:{id:"doublewrite-buffer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#doublewrite-buffer"}},[e._v("#")]),e._v(" Doublewrite Buffer")]),e._v(" "),v("p",[e._v("位于系统表空间中的存储区域，其工作原理是：在将缓冲池中的页写入磁盘上对应位置之前，先将缓冲池中的页copy到内存中的doublewrite buffer，之后再分两次，每次1M，顺序地将内存中doublewrite buffer中的页写入系统表空间中的doublewrite区域，然后立即调用系统fsync函数，同步数据到磁盘文件中，避免缓冲写带来的问题。在完成doublewrite页的写入之后，再将内存上doublewrite buffer中的页写入到自己的表空间文件。如果当页面写入磁盘时，发生了数据库宕机，会导致“写失效”，重启之后，可以通过Doublewrite Buffer来恢复故障前要写的Page数据。")]),e._v(" "),v("p",[v("img",{attrs:{src:"/images/guanxixing/Aspose.Words.a10c56e4-d776-45a2-8e4d-e512eb974108.017.png",alt:""}})]),e._v(" "),v("p",[e._v("InnoDB存储引擎支持事务、MVCC、故障恢复等特性，要理解InnoDB的存储结构，关键点如下：")]),e._v(" "),v("p",[e._v("1、磁盘I/O，磁盘的读写是操作系统实现的，结合磁盘存取数据的过程，来看InnoDB的逻辑存储结构，在磁盘和内存中都以页（Page）为操作的基本单元，页内元素才是基本的行结构数据；")]),e._v(" "),v("p",[e._v("2、基于B+ Tree结构来组织数据的存储，叶节点和非叶节点存储数据和索引，并且通过主键构建整个树结构，便于通过主键索引遍历数据；")]),e._v(" "),v("p",[e._v("3、二阶段提交、undo log等机制完善InnoDB事务的特性；")]),e._v(" "),v("p",[e._v("4、缓冲池、索引等机制的引入提升MySQL性能；")]),e._v(" "),v("p",[e._v("5、由redo log、binlog、错误日志来实现数据库故障恢复、备份和异常情况的记录。")]),e._v(" "),v("h2",{attrs:{id:"特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[e._v("#")]),e._v(" "),v("strong",[e._v("特性")])]),e._v(" "),v("p",[e._v("1、使用核心线程的完全多线程。这意味着它能很容易地利用多CPU（如果有）。")]),e._v(" "),v("p",[e._v("2、支持C、C++、Eiffel、Java、Perl、PHP、Python、和TCL API等客户工具和API。")]),e._v(" "),v("p",[e._v("3、可运行在不同操作系统平台上。")]),e._v(" "),v("p",[e._v("4、支持多种列类型：1、2、3、4、和 8 字节长度的有符号/无符号整数、FLOAT、DOUBLE、CHAR、VARCHAR、TEXT、BLOB、DATE、TIME、DATETIME、 TIMESTAMP、YEAR、SET和ENUM类型。")]),e._v(" "),v("p",[e._v("5、利用一个优化的一遍扫描多重联结（one-sweep multi-join）非常快速地进行联结(join)。")]),e._v(" "),v("p",[e._v("6、在查询的SELECT和WHERE部分支持全部运算符和函数，例如：")]),e._v(" "),v("p",[e._v('mysql> SELECT CONCAT(first_name, " ", last_name) FROM tbl_name')]),e._v(" "),v("p",[e._v("WHERE income/dependents > 10000 AND age > 30;")]),e._v(" "),v("p",[e._v("7、通过一个高度优化的类库实现SQL函数库并且像他们能达到的一样快速，通常在查询初始化后不应该有任何内存分配。")]),e._v(" "),v("p",[e._v("8、全面支持SQL的GROUP BY和ORDER BY子句，支持聚合函数( COUNT()、COUNT(DISTINCT)、AVG()、STD()、SUM()、MAX()和MIN() )。")]),e._v(" "),v("p",[e._v("9、支持ANSI SQL的LEFT OUTER JOIN和ODBC语法，你可以在同一查询中混用来自不同数据库的表。")]),e._v(" "),v("p",[e._v("10、一个非常灵活且安全的权限和口令系统，并且它允许基于主机的认证。口令是安全的，因为当与一个服务器连接时，所有的口令传送被加密。")]),e._v(" "),v("p",[e._v("11、ODBC for Windiws 95。所有的 ODBC 2 . 5 函数和其他许多函数。例如，你可以用Access连接你的 MySQL服务器，具备索引压缩的快速B树磁盘表。")]),e._v(" "),v("p",[e._v("12、每个表允许有16个索引。每个索引可以由1～16个列或列的一部分组成。最大索引长度是 256个字节(在编译MySQL时，它可以改变)。一个索引可以使用一个CHAR或VARCHAR字段的前缀。")]),e._v(" "),v("p",[e._v("13、定长和变长记录。用作临时表的内存散列表。")]),e._v(" "),v("p",[e._v("14、大数据库处理。我们正在对某些包含50,000,000个记录的数据库使用MySQL。")]),e._v(" "),v("p",[e._v("15、所有列都有缺省值，你可以用INSERT插入一个表列的子集，那些没用明确给定值的列设置为他们的缺省值。为了可移植性使用GNU Automake , Autoconf 和libtool。")]),e._v(" "),v("p",[e._v("16、用C和C++编写，并用大量不同的编译器测试，一个非常快速的基于线程的内存分配系统。")]),e._v(" "),v("p",[e._v('17、全面支持ISO-8859-1 Latin-1字符集。例如，斯堪的纳维亚的字符 @ringaccent{a}, @"a and @"o 在表和列名字被允许。')]),e._v(" "),v("p",[e._v("18、表和列的别名符合SQL92标准。")]),e._v(" "),v("p",[e._v("19、函数名不会与表或列名冲突。例如ABS是一个有效的列名字。")]),e._v(" "),v("p",[e._v("20客户端使用TCP/IP 连接或Unix套接字（socket）或NT下的命名管道连接MySQL。")]),e._v(" "),v("p",[e._v("21、MySQL特有的SHOW命令可用来检索数据库、表和索引的信息，EXPLAIN命令可用来确定优化器如何解决一个查询。")]),e._v(" "),v("h2",{attrs:{id:"使用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[e._v("#")]),e._v(" "),v("strong",[e._v("使用场景")])]),e._v(" "),v("h2",{attrs:{id:"web网站系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#web网站系统"}},[e._v("#")]),e._v(" "),v("strong",[e._v("Web网站系统")])]),e._v(" "),v("p",[e._v("Web 网站开发者是 MySQL 最大的客户群，也是 MySQL 发展史上最为重要的支撑力量。")]),e._v(" "),v("h2",{attrs:{id:"日志记录系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#日志记录系统"}},[e._v("#")]),e._v(" "),v("strong",[e._v("日志记录系统")])]),e._v(" "),v("p",[e._v("MySQL 数据库的插入和查询性能都非常的高效，如果设计的好，在使用 MyISAM 存储引擎的时候，两者可以做到互不锁定，达到很高的并发性能。所以，对需要大量的插入和查询日志记录的系统来说，MySQL 是非常不错的选择。比如处理用户的登录日志，操作日志等，都是非常适合的应用场景。")]),e._v(" "),v("h2",{attrs:{id:"数据仓库系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据仓库系统"}},[e._v("#")]),e._v(" "),v("strong",[e._v("数据仓库系统")])]),e._v(" "),v("p",[e._v("由于mysql高效的查询性能和可操作性，因此在数据仓库的建立当中，mysql往往继续充当上层应用的数据库接口，用来存储经过层层筛选和统计后的数据。")]),e._v(" "),v("h2",{attrs:{id:"嵌入式系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#嵌入式系统"}},[e._v("#")]),e._v(" "),v("strong",[e._v("嵌入式系统")])]),e._v(" "),v("p",[e._v("嵌入式环境对软件系统最大的限制是硬件资源非常有限，在嵌入式环境下运行的软件系统，必须是轻量级低消耗的软件。MySQL 在资源的使用方面的伸缩性非常大，可以在资源非常充裕的环境下运行，也可以在资源非常少的环境下正常运行。它对于嵌入式环境来说，是一种非常合适的数据库系统，而且 MySQL 有专门针对于嵌入式环境的版本。")]),e._v(" "),v("p",[e._v("局限性：缺乏一些存储程序的功能，比如MyISAM引擎联支持交换功能； 使用缺省的ip端口，但是有时候这些ip也会被一些黑客闯入；使用myisam配置，如果你不慎损坏数据库，结果可能会导致所有的数据丢失。")])])}),[],!1,null,null,null);_.default=r.exports}}]);